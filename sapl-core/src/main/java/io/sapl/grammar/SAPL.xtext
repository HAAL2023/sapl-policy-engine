/**
 * Copyright Â© 2017 Dominic Heutelbeck (dheutelbeck@ftk.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
 
grammar io.sapl.^grammar.SAPL with org.eclipse.xtext.common.Terminals
hidden(ML_COMMENT, SL_COMMENT, WS)

import "http://sapl.io/sapl/SAPL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SAPL: 
	imports+=Import* policyElement=PolicyElement ;

Import:
	'import' (
		{WildcardImport} libSteps+=ID ('.' libSteps+=ID)* '.' '*' |
		{LibraryImport} (libSteps+=ID '.')* libSteps+=ID 'as' libAlias=ID |
		libSteps+=ID ('.' libSteps+=ID)* '.' functionName=ID
	) ;
	
PolicyElement:
	PolicySet | Policy;
	
PolicySet:
	{PolicySet} 'set' saplName=STRING
	algorithm=CombiningAlgorithm ('for' targetExpression=Expression)?
	(valueDefinitions+=ValueDefinition ';')*
	policies+=Policy+ ;
	
CombiningAlgorithm:
	'deny-overrides' | 'permit-overrides' | 'first-applicable' | 'only-one-applicable'
	| 'deny-unless-permit' | 'permit-unless-deny' ;

Policy:
	{Policy} 'policy' saplName=STRING
	entitlement=Entitlement (targetExpression=Expression)?
	(body=PolicyBody)?
	('obligation' obligation=Expression)?
	('advice' advice=Expression)?
	('transform' transformation=Expression)? ;

Entitlement:
	'permit' | 'deny' ;

PolicyBody:
	'where' (statements+=Statement ';')+ ;

Statement:
	ValueDefinition | 
	{Condition} expression=Expression ;

ValueDefinition:
	'var' name=ID '=' eval=Expression ;

Expression:
	Addition ;

Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-' | {Or.left=current} '||')
	right=Multiplication)* ;

Multiplication returns Expression:
	Comparison (({Multi.left=current} '*' | {Div.left=current} '/' | {And.left=current} '&&')
	right=Comparison)* ;

Comparison returns Expression:
	Prefixed (({Equals.left=current} '==' | {Regex.left=current} '=~' | {Less.left=current} '<' |
	{LessEquals.left=current} '<=' | {More.left=current} '>' | {MoreEquals.left=current} '>=' | {ElementOf.left=current} 'in') right=Prefixed)? ;

Prefixed returns Expression:
	{Not} '!' expression=BasicExpression | {UnaryMinus} '-' expression=BasicExpression | BasicExpression;

BasicExpression returns Expression:
	Basic (FILTER filter=FilterComponent | SUBTEMPLATE subtemplate=BasicExpression)?;

Basic returns BasicExpression:
	{BasicGroup} '(' expression=Expression ')' steps+=Step* |
	{BasicValue} value=Value steps+=Step*  |
	{BasicFunction} fsteps+=ID ('.' fsteps+=ID)*  arguments=Arguments steps+=Step* |
	{BasicIdentifier} identifier=ID steps+=Step* |
	BasicRelative;

BasicRelative:
	{BasicRelative} '@' steps+=Step* ;

Arguments:
	{Arguments} '(' (args+=Expression (',' args+=Expression)*)? ')';

Step:
	'.' ({KeyStep} id=ID | {WildcardStep} '*' | {AttributeFinderStep} '<' idSteps+=ID ('.' idSteps+=ID)* '>') |
	'[' Subscript ']' |
	'..' (
		{RecursiveKeyStep} (id=ID | '[' id=STRING ']' ) | 
		{RecursiveWildcardStep} ('*' | '[' '*' ']' ) |
		{RecursiveIndexStep} '[' index=JSONNUMBER ']'
	) ;
	
Subscript returns Step:
	{KeyStep} id=STRING |
	{WildcardStep} '*' |
	{IndexStep} index=JSONNUMBER |
	{ArraySlicingStep} index=JSONNUMBER? ':' to=JSONNUMBER? (':' step=JSONNUMBER)? |
	{ExpressionStep} '(' expression=Expression ')' |
	{ConditionStep} '?' '(' expression=Expression ')' |
	{IndexUnionStep} indices+=JSONNUMBER ',' indices+=JSONNUMBER (',' indices+=JSONNUMBER)* |
	{AttributeUnionStep} attributes+=STRING ',' attributes+=STRING (',' attributes+=STRING)* ;

Value:
	Object | Array | NumberLiteral | StringLiteral | BooleanLiteral | NullLiteral ;

Object returns Value:
	{Object} '{' (members+=Pair (',' members+=Pair)*)? '}' ;

Pair:
	key=STRING ':' value=Expression;

Array returns Value:
	{Array} '[' (items+=Expression (',' items+=Expression)*)? ']' ;

BooleanLiteral returns Value:
	{TrueLiteral} 'true' |
	{FalseLiteral} 'false' ;

NullLiteral returns Value:
	{NullLiteral} 'null' ;

StringLiteral returns Value:
	{StringLiteral} string=STRING ;

NumberLiteral returns Value:
	{NumberLiteral} number=JSONNUMBER ;

FilterComponent: 
	{FilterSimple} each?='each'? fsteps+=ID ('.' fsteps+=ID)* arguments=Arguments? |
	{FilterExtended} '{' statements+=FilterStatement (',' statements+=FilterStatement)* '}' ;

FilterStatement:
	each?='each'? target=BasicRelative? ':' fsteps+=ID ('.' fsteps+=ID)* arguments=Arguments? ;

@Override 
terminal ID: 
	'^'? ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'$'|'0'..'9')*;

terminal FILTER:
	'|-' ;
	
terminal SUBTEMPLATE:
	'::' ;

terminal JSONNUMBER returns ecore::EBigDecimal: // Definition according to JSON standard
	'-'? ('0' | ('1'..'9') DIGIT*) ('.' DIGIT+)? (('E' | 'e') ('+' | '-')? DIGIT+)? ;

terminal fragment DIGIT:
	('0'..'9') ;